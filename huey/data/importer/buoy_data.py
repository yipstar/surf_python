# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_data.importer.buoy_data.ipynb (unless otherwise specified).

__all__ = ['ts_from_df_row', 'import_buoy_realtime_wave_detail']

# Cell
from ...imports import *

# Cell
from ..sql import get_db_engine

# Cell
def ts_from_df_row(row):
        return datetime(
            int(row['#YY']),
            int(row['MM']),
            int(row['DD']),
            int(row['hh']),
            int(row['mm']),
            tzinfo=timezone.utc)

# Cell
def import_buoy_realtime_wave_detail(station_id):
    db_engine = get_db_engine()
    sql = f"select * from buoy where station_id='{station_id}'"
    buoy = pd.read_sql(sql, db_engine).iloc[0]

    sql = f"select * from buoy_realtime_wave_detail order by ts desc limit 1"
    latest_ob = pd.read_sql(sql, db_engine, parse_dates=['ts']).iloc[0]

    station_id = "46025"
    realtime_url = f"https://www.ndbc.noaa.gov/data/realtime2/{station_id}.spec"
    df = pd.read_csv(realtime_url, delim_whitespace=True)

    df["buoy_id"] = buoy.id

    df = df.replace('MM', np.NaN)

    df2 = df.rename(columns={
        "WVHT": "significant_wave_height",
        "SwH": "swell_height",
        "SwP": "swell_period",
        "SwD": "swell_direction",
        "WWH": "wind_wave_height",
        "WWP": "wind_wave_period",
        "STEEPNESS": "steepness",
        "MWD": "dominant_wave_direction"
    })

    # skip first row
    df2 = df2[1:]

    def ts_from_df_row(row):
        return datetime(
            int(row['#YY']),
            int(row['MM']),
            int(row['DD']),
            int(row['hh']),
            int(row['mm']),
            tzinfo=timezone.utc)

    df2["ts"] = df2.apply(lambda row: ts_from_df_row(row), axis=1)
    df2 = df2.drop(columns=['#YY', 'MM', 'DD', 'hh', 'mm'])
    df2 = df2.drop(columns=['WWD', 'APD'])

    sql = f"select * from buoy_realtime_wave_detail order by ts desc limit 1"
    latest_ob = pd.read_sql(sql, db_engine, parse_dates=['ts']).iloc[0]

    # only insert latest obs not in the db already
    df2_latest = df2[df2.ts > latest_ob.ts]

    df2_latest.to_sql('buoy_realtime_wave_detail', con=db_engine, if_exists='append', index=False)

    return df2_latest